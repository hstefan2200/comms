BPSKModulator:
    carrier frequency = 1000 Hz (low enough to be easy to work with, but still audible)
    sample rate = 8000 Hz (can probably get away with 3-5 kHz, but phones use 8kHz, so we'll stick with that for now) (https://dsp.stackexchange.com/questions/22107/why-is-telephone-audio-sampled-at-8-khz)

    bits: expects an array of 1s and 0s

    time vector is telling us when we need to calculate the values of the cosine wave
        so basically we divide the total number of samples that we are transmitting by the sample_rate
            ie: if we just have [-1, +1], multiplied by 8 samples per symbol, we get 16 samples.
                so then we divide each sample by the sampling rate (0, 1/8000, 2/8000. 3/8000... 15/8000)

    Generating modulated signal:
        We take in an array of 0s and 1s, which get converted to -1 and +1 respectively (bits to symbols)
        we then stretch the symbol out across the calculated samples_per_symbol value (8)
            ie: [1. -1] --> [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
            That is 2 symbol represented as 16 samples 
        np.cos(2 * pi * carrier_freq * time_vector) gives us carrier wave
        multiplied by the symbol (positive or negative) gives us the phase shift needed for BPSK

    
BPSKDemodulator:
    samples per symbol and time vector are the same as in the modulate method above

    we create a reference cosine wave at carrier frequency
    by multiplying the reference and the signal, we can easily demodulate using a trig identity
        (-cos * cos = -.5 - .5cos = negative DC + high frquency) and (+cos * cos = .5 + .5cos = DC + high frequency)

    Then we basically try to integrate over each symbol period (8 samples)
        this should filter out the high frequency and keep only the DC component
        And then we simply assign 1 to a positive mean, and 0 to a negative mean.