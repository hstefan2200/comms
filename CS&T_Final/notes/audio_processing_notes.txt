we first load the audio
    this will return audio data as a numpy array, as well as the sampling rate of the audio
    we account for 8, 16, and 32 bit audio
    we also handle stereo (just in case) and only take the left channel

we then quantize the audio (numpy array)
    we first clip so that we are only handling audio from -1 to +1 (handling excessive volume differences)
    we then quantize it to 8 bits for transmission--> so basically taking the values from -1 to +1, and multiply by 127 for 8-bits

then we convert to bits
    we first downsample (default is 1--> no change), but have the option to reduce the sample size by say a factor of 4 (taking every 4th sample)
    we then convert to unsigned integers, original = -128 to +127, is now 0-255 (easier to convert to binary)


To reconstruct, we essentially reverse everything.

initial tests-- had to fix a sampling rate error
    when I had no downsampling, it was working fine.
    when I added ddownsampling, I needed to account for that in the reconstruction

    I can make out the words clearly, but there is some static, so I might want to play around with the quantization and try 16 bit quantization

    Ok, so quantization at 16 bits with no downsampling sounds basically like the original
    quantization at 16 bits, with a downsampling factor of 4 sounds a bit better, but more muffled than fuzzy

    I think 8 bit is more realistic for space applications though, but it is easy enough to switch back and forth

    